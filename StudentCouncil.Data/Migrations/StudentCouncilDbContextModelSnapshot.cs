// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentCouncil.Data.Data;

#nullable disable

namespace StudentCouncil.Data.Migrations
{
    [DbContext(typeof(StudentCouncilDbContext))]
    partial class StudentCouncilDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("StudentCouncil.Data.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex(new[] { "CityName" }, "QK_Cities_CityName")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.CouncilUser", b =>
                {
                    b.Property<int>("CouncilUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouncilUserId"), 1L, 1);

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CouncilUserId");

                    b.HasIndex("FileId");

                    b.ToTable("CouncilUsers");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CountryId");

                    b.HasIndex(new[] { "CountryName" }, "QK_Countries_CountryName")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Curator", b =>
                {
                    b.Property<int>("CuratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuratorId"), 1L, 1);

                    b.Property<DateTime>("BecameDate")
                        .HasColumnType("date");

                    b.Property<string>("BecameReason")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("CuratorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MemberId");

                    b.ToTable("Curators");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("DepartmentId");

                    b.HasIndex(new[] { "DepartmentName" }, "QK_Departments_DepartmentName")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.DepartmentDocument", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int")
                        .HasColumnName("FileID");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FileId");

                    b.ToTable("DepartmentDocuments");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.DepartmentMember", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("date");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MemberId");

                    b.ToTable("DepartmentMembers");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Document", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"), 1L, 1);

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("FileId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("GroupChar")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.HasIndex("StudentId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"), 1L, 1);

                    b.Property<decimal?>("Investments")
                        .HasColumnType("money");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("PlanDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PlanShort")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("PlanId");

                    b.HasIndex("MemberId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.PlanDocument", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.HasIndex("FileId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanDocuments");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"), 1L, 1);

                    b.Property<int>("CuratorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ReportId");

                    b.HasIndex("CuratorId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.ReportDocument", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasIndex("FileId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportDocuments");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolId"), 1L, 1);

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("date");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SchoolId");

                    b.HasIndex("LocationId");

                    b.HasIndex(new[] { "SchoolName" }, "QK_Schools_SchoolName")
                        .IsUnique();

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<int>("CouncilUserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.City", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Cities_To_Countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.CouncilUser", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Document", "File")
                        .WithMany("CouncilUsers")
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("FK_CouncilUsers_To_Documents");

                    b.Navigation("File");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Curator", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Department", "Department")
                        .WithMany("Curators")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Curators_To_Departments");

                    b.HasOne("StudentCouncil.Data.Models.Member", "Member")
                        .WithMany("Curators")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Curators_To_Members");

                    b.Navigation("Department");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.DepartmentDocument", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentDocuments_To_Departments");

                    b.HasOne("StudentCouncil.Data.Models.Document", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentDocuments_To_Documents");

                    b.Navigation("Department");

                    b.Navigation("File");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.DepartmentMember", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentMembers_To_Departments");

                    b.HasOne("StudentCouncil.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentMembers_To_Members");

                    b.Navigation("Department");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Location", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Locations_To_Cities");

                    b.HasOne("StudentCouncil.Data.Models.Country", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Locations_To_Countries");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Member", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Student", "Student")
                        .WithMany("Members")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Members_To_Students");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Plan", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Member", "Member")
                        .WithMany("Plans")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Plans_To_Members");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.PlanDocument", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Document", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("FK_PlanDocuments_To_Documents");

                    b.HasOne("StudentCouncil.Data.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("FK_PlanDocuments_To_Plans");

                    b.Navigation("File");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Report", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Curator", "Curator")
                        .WithMany("Reports")
                        .HasForeignKey("CuratorId")
                        .IsRequired()
                        .HasConstraintName("FK_Reports_To_Curators");

                    b.Navigation("Curator");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.ReportDocument", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Document", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportDocuments_To_Documents");

                    b.HasOne("StudentCouncil.Data.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportDocuments_To_Reports");

                    b.Navigation("File");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.School", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Location", "Location")
                        .WithMany("Schools")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Schools_To_Locations");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Student", b =>
                {
                    b.HasOne("StudentCouncil.Data.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_To_Groups");

                    b.HasOne("StudentCouncil.Data.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_To_Schools");

                    b.Navigation("Group");

                    b.Navigation("School");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.City", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Curator", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Department", b =>
                {
                    b.Navigation("Curators");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Document", b =>
                {
                    b.Navigation("CouncilUsers");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Location", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Member", b =>
                {
                    b.Navigation("Curators");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.School", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentCouncil.Data.Models.Student", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
